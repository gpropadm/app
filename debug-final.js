const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function debugFinal() {
  console.log('üîç DEBUG FINAL - Verificando se h√° telefone do usu√°rio logado aparecendo incorretamente...\n')
  
  // Buscar todas as notifica√ß√µes de parceria e comparar os telefones
  const notifications = await prisma.partnershipNotification.findMany({
    include: {
      fromUser: {
        select: { id: true, name: true, phone: true, email: true }
      },
      toUser: {
        select: { id: true, name: true, phone: true, email: true }
      }
    },
    orderBy: { createdAt: 'desc' }
  })
  
  console.log(`üìä Analisando ${notifications.length} notifica√ß√µes de parceria...\n`)
  
  let problemsFound = 0
  
  for (let i = 0; i < notifications.length; i++) {
    const notification = notifications[i]
    
    console.log(`--- NOTIFICA√á√ÉO ${i + 1} ---`)
    console.log(`üë§ De (corretor com cliente): ${notification.fromUser.name} (${notification.fromUser.email})`)
    console.log(`   üìû Telefone real do corretor: ${notification.fromUser.phone || 'N√ÉO DEFINIDO'}`)
    console.log(`   üìû Telefone na notifica√ß√£o: ${notification.fromUserPhone || 'N√ÉO DEFINIDO'}`)
    
    console.log(`üë§ Para (dono do im√≥vel): ${notification.toUser.name} (${notification.toUser.email})`)
    console.log(`   üìû Telefone do dono do im√≥vel: ${notification.toUser.phone || 'N√ÉO DEFINIDO'}`)
    
    // Verificar se o telefone na notifica√ß√£o √© diferente do telefone real do corretor
    if (notification.fromUserPhone !== notification.fromUser.phone) {
      console.log(`‚ùå PROBLEMA: Telefone na notifica√ß√£o n√£o confere com o telefone real do corretor!`)
      problemsFound++
    }
    
    // Verificar se o telefone na notifica√ß√£o √© igual ao telefone do usu√°rio que recebe
    if (notification.fromUserPhone === notification.toUser.phone) {
      console.log(`‚ùå PROBLEMA GRAVE: Telefone na notifica√ß√£o √© igual ao telefone do usu√°rio logado!`)
      console.log(`   Isso significa que est√° mostrando o telefone errado!`)
      problemsFound++
    }
    
    if (notification.fromUserPhone === notification.fromUser.phone) {
      console.log(`‚úÖ OK: Telefone na notifica√ß√£o confere com o telefone do corretor`)
    }
    
    console.log('')
  }
  
  if (problemsFound === 0) {
    console.log('üéâ NENHUM PROBLEMA ENCONTRADO!')
    console.log('Os telefones est√£o sendo exibidos corretamente.')
    console.log('')
    console.log('ü§î Se voc√™ est√° vendo o telefone errado, pode ser:')
    console.log('1. Um problema de cache do navegador')
    console.log('2. Dados antigos sendo exibidos')
    console.log('3. Confus√£o na interpreta√ß√£o (o telefone mostrado DEVE ser do corretor que tem o cliente)')
    console.log('4. Um problema espec√≠fico de uma situa√ß√£o que n√£o est√° nos dados atuais')
  } else {
    console.log(`‚ùå ${problemsFound} PROBLEMAS ENCONTRADOS!`)
  }
  
  console.log('\nüîç RESUMO DOS DADOS CORRETOS:')
  console.log('Na notifica√ß√£o de parceria:')
  console.log('- "Contato do Corretor:" deve mostrar o CORRETOR que TEM o cliente interessado')
  console.log('- O telefone mostrado deve ser do CORRETOR que tem o cliente (fromUser)')
  console.log('- N√ÉO deve ser o telefone do usu√°rio logado (toUser)')
  console.log('')
  console.log('Exemplo: Se voc√™ √© ALE IMOVEIS e BS IMOVEIS tem um cliente interessado no seu im√≥vel,')
  console.log('a notifica√ß√£o deve mostrar o telefone de BS IMOVEIS, n√£o o seu telefone.')
}

debugFinal()
  .catch(console.error)
  .finally(() => prisma.$disconnect())